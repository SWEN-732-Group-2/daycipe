'''
This script is used to post jokes, facts, and recipes to the PostgreSQL database via REST API.
It reads the content from JSON files generated by the one_day_generator.py script and posts them to the respective endpoints.
The one_day_generator.py script needs to be ran first.

To view the outputs for recipes and facts, take a look at the example_daily_outputs directory.

# NOTE: For now, the date that gets printed is just the today's date, not the date of the content.
'''

import json
import requests
from datetime import date

# URLs
JOKE_URL = "http://localhost:3001/api/jokes/create"
FACT_URL = "http://localhost:3001/api/facts/create"
RECIPE_URL = "http://localhost:3001/api/recipes/create"

# Current date (ISO format)
today = date.today().isoformat()
date_str = date.today().strftime("%B %d")
date_str = "December 16"  # Uncomment this line to use the current date in the format "Month Day"
content_directory = "daily_outputs"

# === POST JOKES ===
def post_jokes():
    try:
        filepath = content_directory + "/jokes_" + date_str + ".json"
        with open(filepath, "r", encoding="utf-8") as f:
            jokes = json.load(f)

        for joke_text in jokes:
            payload = {
                "joke": {
                    "date": today,
                    "content": joke_text
                }
            }
            response = requests.post(JOKE_URL, json=payload)
            if response.ok:
                print(f"✅ Joke posted: {joke_text}")
            else:
                print(f"❌ Failed to post joke: {response.text}")
    except Exception as e:
        print(f"⚠️ Error posting jokes: {e}")

# === POST FACTS ===
def post_facts():
    try:
        filepath = content_directory + "/facts_" + date_str + ".json"
        with open(filepath, "r", encoding="utf-8") as f:
            facts = json.load(f)

        category_map = {
            "mathematics": "math",
            "physics": "physics",
            "biology": "bio",
            "computer science": "compsci",
            "chemistry": "chem"
        }

        for label, data in facts.items():
            mapped_category = category_map.get(label.lower())
            if not mapped_category:
                print(f"⚠️ Skipping unrecognized category: {label}")
                continue            

            payload = {
                "fact": {
                    "date": today,
                    "content": data["fact"], # size limit is 1000 characters
                    "source": data["source"], # size limit is 200 characters
                    "category": mapped_category
                }
            }

            response = requests.post(FACT_URL, json=payload)
            if response.ok:
                print(f"✅ Fact posted ({mapped_category}): {data['fact'][:60]}...")
            else:
                print(f"❌ Failed to post fact ({label}): {response.text}")
    except Exception as e:
        print(f"⚠️ Error posting facts: {e}")

# === POST RECIPES ===
def post_recipes():
    try:
        filepath = content_directory + "/recipes_" + date_str + ".json"
        with open(filepath, "r", encoding="utf-8") as f:
            recipes = json.load(f)

        # Here, recipe is a JSON with the structure:
        # {title, description, ingredients:{}, instructions:[], cook_time, serving_size}
        for category, recipe in recipes.items():
            payload = {
                "recipe": {
                    "date": today,
                    "content": recipe,
                    "category": category
                }
            }
            response = requests.post(RECIPE_URL, json=payload)
            if response.ok:
                print(f"✅ Recipe posted ({category}): {recipe['title'][:60]}...")
            else:
                print(f"❌ Failed to post recipe ({category}): {response.text}")
    except Exception as e:
        print(f"⚠️ Error posting recipes: {e}")

# Run both
if __name__ == "__main__":
    print("Posting content for date:", date_str)
    post_jokes()
    post_facts()
    post_recipes()